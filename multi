class Counter {
    int count = 0;

    // synchronized method to avoid race condition
    synchronized void increment() {
        count++;
    }
}

class MyThread extends Thread {
    Counter counter;

    MyThread(Counter counter) {
        this.counter = counter;
    }

    public void run() {
        for (int i = 0; i < 5; i++) {
            counter.increment();
            System.out.println(Thread.currentThread().getName() + " - Count: " + counter.count);
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                System.out.println("Thread interrupted.");
            }
        }
    }
}

public class SimpleMultithreading {
    public static void main(String[] args) {
        Counter sharedCounter = new Counter();

        MyThread t1 = new MyThread(sharedCounter);
        MyThread t2 = new MyThread(sharedCounter);

        t1.setName("Thread-1");
        t2.setName("Thread-2");

        t1.setPriority(Thread.MIN_PRIORITY);  // Priority 1
        t2.setPriority(Thread.MAX_PRIORITY);  // Priority 10

        t1.start();
        t2.start();

        System.out.println("t1 isAlive: " + t1.isAlive());
        System.out.println("t2 isAlive: " + t2.isAlive());

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted.");
        }

        System.out.println("t1 isAlive after join: " + t1.isAlive());
        System.out.println("t2 isAlive after join: " + t2.isAlive());
        System.out.println("Final Count: " + sharedCounter.count);
        System.out.println("Main thread ends.");
    }
}
